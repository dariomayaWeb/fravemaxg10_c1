/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Controlador.CompraData;
import Controlador.DetalleCompraData;
import Controlador.ProveedorData;
import Modelo.Compra;
import Modelo.Proveedor;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlo
 */
public class ListaCompras extends javax.swing.JInternalFrame {

    /**
     * Creates new form ListaCompras
     */
    private DefaultTableModel modelo;
    private ArrayList<Proveedor> listaProveedor;
    private ProveedorData provData;
    private CompraData compraData;
    private ArrayList<Compra> listaCompras;
    private DetalleCompraData detCompraData;    
    
    public ListaCompras() {
        initComponents();
        modelo = new DefaultTableModel();
        provData = new ProveedorData();
        listaProveedor = (ArrayList) provData.listarProveedor();
        compraData = new CompraData();
        detCompraData = new DetalleCompraData();
        listaCompras = (ArrayList) compraData.listaCompras();

        cargarProveedores();
        armarCabecera();
        cargarDatos(listaCompras);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        btnNuevaCompra = new javax.swing.JButton();
        lblSelecProv = new javax.swing.JLabel();
        cmboxProv = new javax.swing.JComboBox<>();
        calendarFecha = new com.toedter.calendar.JDateChooser();
        lblFecha = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCompra = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        btnCerrarCompra = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnActivar = new javax.swing.JButton();
        btnEditarCompra = new javax.swing.JButton();
        btnDetalle = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(700, 530));
        setPreferredSize(new java.awt.Dimension(700, 530));

        lblTitulo.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        lblTitulo.setText("Listado de Compras");

        btnNuevaCompra.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnNuevaCompra.setText("Nueva Compra");
        btnNuevaCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaCompraActionPerformed(evt);
            }
        });

        lblSelecProv.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblSelecProv.setText("Proveedor:");

        lblFecha.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblFecha.setText("Fecha:");

        btnBuscar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tablaCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaCompra.setPreferredSize(new java.awt.Dimension(600, 300));
        jScrollPane1.setViewportView(tablaCompra);

        btnActualizar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnCerrarCompra.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnCerrarCompra.setText("Cerrar Compra");
        btnCerrarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarCompraActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnActivar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnActivar.setText("Reabrir");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });

        btnEditarCompra.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnEditarCompra.setText("Editar Compra");
        btnEditarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCompraActionPerformed(evt);
            }
        });

        btnDetalle.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnDetalle.setText("Ver Detalle");
        btnDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSelecProv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmboxProv, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calendarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(btnNuevaCompra))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDetalle)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditarCompra)
                        .addGap(18, 18, 18)
                        .addComponent(btnCerrarCompra)
                        .addGap(18, 18, 18)
                        .addComponent(btnActivar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addComponent(jScrollPane1)
                    .addGap(15, 15, 15)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBuscar)
                        .addComponent(btnNuevaCompra))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(calendarFecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSelecProv)
                            .addComponent(cmboxProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFecha))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 356, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetalle)
                    .addComponent(btnActualizar)
                    .addComponent(btnCerrarCompra)
                    .addComponent(btnSalir)
                    .addComponent(btnActivar)
                    .addComponent(btnEditarCompra))
                .addGap(31, 31, 31))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(99, 99, 99)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(99, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevaCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaCompraActionPerformed
        // TODO add your handling code here:
        Proveedor proveedor = (Proveedor) cmboxProv.getSelectedItem();
        Date fechaDate = calendarFecha.getDate();
        if (proveedor.getIdProveedor()!= 0 && fechaDate != null) {
            LocalDate fechaLD = parsearFecha(fechaDate);
            Compra nuevaCompra = new Compra(proveedor, fechaLD, true);
            compraData.guardarCompra(nuevaCompra);
            actualizar();
            cargarProveedores();
            calendarFecha.setDate(null);
        } else {
            JOptionPane.showMessageDialog(null, "Elija un proveedor y la fecha");
            calendarFecha.setDate(null);
            cargarProveedores();
        }
    }//GEN-LAST:event_btnNuevaCompraActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        Proveedor proveedor = (Proveedor) cmboxProv.getSelectedItem();
        Date fechaDate = calendarFecha.getDate();
        if (proveedor.getIdProveedor()!= 0 && fechaDate != null) {
            LocalDate fechaLD = parsearFecha(fechaDate);
            ArrayList<Compra> compraProveedorFecha = (ArrayList<Compra>) compraData.listarComprasProveedorFecha(proveedor.getIdProveedor(), fechaLD);
            cargarDatos(compraProveedorFecha);

        } else if (proveedor.getIdProveedor()!= 0 && fechaDate == null) {
            ArrayList<Compra> comprasProveedor = (ArrayList<Compra>) compraData.listarComprasProveedor(proveedor.getIdProveedor());
            cargarDatos(comprasProveedor);
        } else if (proveedor.getIdProveedor()== 0 && fechaDate != null) {
            LocalDate fechaLD = parsearFecha(fechaDate);
            ArrayList<Compra> comprasFecha = (ArrayList<Compra>) compraData.listarComprasFecha(fechaLD);
            cargarDatos(comprasFecha);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizar();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnCerrarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarCompraActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaCompra.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una compra para Cerrar");
        } else {
            int idCompra = Integer.parseInt(tablaCompra.getValueAt(filaSelecionada, 0).toString());
            compraData.cerrarCompra(idCompra);
            actualizar();
        }
    }//GEN-LAST:event_btnCerrarCompraActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaCompra.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una compra para Reabrir");
        } else {
            int idCompra = Integer.parseInt(tablaCompra.getValueAt(filaSelecionada, 0).toString());
            compraData.reabrirCompra(idCompra);
            actualizar();
        }
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnEditarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCompraActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaCompra.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una compra para editar");
        } else {
            int idCompra = Integer.parseInt(tablaCompra.getValueAt(filaSelecionada, 0).toString());
            Proveedor proveedor = (Proveedor) cmboxProv.getSelectedItem();
            Date fechaDate = calendarFecha.getDate();
            if (proveedor.getIdProveedor()!= 0 && fechaDate != null) {
                LocalDate fechaLD = parsearFecha(fechaDate);
                Compra compraEditar = new Compra(idCompra, proveedor, fechaLD, true);
                compraData.modificarCompra(compraEditar);
                actualizar();
                cargarProveedores();
                calendarFecha.setDate(null);
            } else {
                JOptionPane.showMessageDialog(null, "Elija un proveedor y la fecha");
                calendarFecha.setDate(null);
                cargarProveedores();
            }
        }
    }//GEN-LAST:event_btnEditarCompraActionPerformed

    private void btnDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalleActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaCompra.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una compra para ver el Detalle");
        } else {
            int idCompra = Integer.parseInt(tablaCompra.getValueAt(filaSelecionada, 0).toString());
            ListaDetalleCompra lisDetC = new ListaDetalleCompra(idCompra);
            lisDetC.setVisible(true);
            Principal.EscritorioPrinc.add(lisDetC);
            Principal.EscritorioPrinc.moveToFront(lisDetC);
        }
    }//GEN-LAST:event_btnDetalleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrarCompra;
    private javax.swing.JButton btnDetalle;
    private javax.swing.JButton btnEditarCompra;
    private javax.swing.JButton btnNuevaCompra;
    private javax.swing.JButton btnSalir;
    private com.toedter.calendar.JDateChooser calendarFecha;
    private javax.swing.JComboBox<Proveedor> cmboxProv;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblSelecProv;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tablaCompra;
    // End of variables declaration//GEN-END:variables

    public void cargarProveedores() {
        cmboxProv.removeAllItems();
        Proveedor opcionDefecto = new Proveedor(0, "Seleccione un proveedor", "", "",isIcon);
        cmboxProv.addItem(opcionDefecto);
        for (Proveedor prov : listaProveedor) {
            cmboxProv.addItem(prov);
        }
    }

    private void armarCabecera() {
        ArrayList<Object> columns = new ArrayList<Object>();
        columns.add("ID");
        columns.add("Fecha");
        columns.add("Razon Social");
        columns.add("Monto");
        columns.add("Estado");
        for (Object it : columns) {
            modelo.addColumn(it);
        }
        tablaCompra.setModel(modelo);
    }

    private void cargarDatos(ArrayList listaCompras) {
        borrarFilasTabla();
        double monto = 0.0;
        String estado = "";
        for (Object compraOb : listaCompras) {
            Compra compra = (Compra) compraOb;
            monto = detCompraData.montoTotal(compra.getIdCompra());
            if (compra.isEstado()) {
                estado = "Abierto";
            } else {
                estado = "Cerrado";
            }
            modelo.addRow(new Object[]{compra.getIdCompra(), compra.getFecha(), compra.getProveedor().getRazonSocial(), monto, estado});
        }
    }

    public void borrarFilasTabla() {
        int a = modelo.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void actualizar(){
        listaCompras = (ArrayList) compraData.listaCompras();
        cargarDatos(listaCompras);
        cargarProveedores();
        calendarFecha.setDate(null);
    }
    
    public LocalDate parsearFecha(Date fechaDate) {
        long fechaLong = fechaDate.getTime();
        java.sql.Date fechaSql = new java.sql.Date(fechaLong);
        LocalDate fechaLD = fechaSql.toLocalDate();
        return fechaLD;
    }

}
