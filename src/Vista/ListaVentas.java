/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Controlador.ClienteData;
import Controlador.DetalleVentaData;
import Controlador.VentaData;
import Modelo.Cliente;
import Modelo.Venta;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlo
 */
public class ListaVentas extends javax.swing.JInternalFrame {

    /**
     * Creates new form ListaVentas1
     */
    private DefaultTableModel modelo;
    private ArrayList<Cliente> listaClientes;
    private ClienteData clData;
    private VentaData ventaData;
    private ArrayList<Venta> listaVentas;
    private DetalleVentaData detVentaData;
 
    public ListaVentas() {
        initComponents();
        modelo = new DefaultTableModel();
        clData = new ClienteData();
        listaClientes = (ArrayList) clData.listarCliente();
        ventaData = new VentaData();
        detVentaData = new DetalleVentaData();
        
        cargarClientes();
        armarCabecera();
        cargarDatos(listaVentas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblSelecCliente = new javax.swing.JLabel();
        cmboxClientes = new javax.swing.JComboBox<>();
        lblFecha = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        btnDetalle = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        btnNuevaVenta = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnCerrarVenta = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnActivar = new javax.swing.JButton();
        btnEditarVenta = new javax.swing.JButton();
        calendarFecha = new com.toedter.calendar.JDateChooser();

        setMinimumSize(new java.awt.Dimension(700, 530));
        setPreferredSize(new java.awt.Dimension(700, 530));

        lblTitulo.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        lblTitulo.setText("Listado de Ventas");

        lblSelecCliente.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblSelecCliente.setText("Cliente:");

        lblFecha.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblFecha.setText("Fecha:");

        btnBuscar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnDetalle.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnDetalle.setText("Ver Detalle");
        btnDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalleActionPerformed(evt);
            }
        });

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaVentas.setPreferredSize(new java.awt.Dimension(600, 250));
        jScrollPane1.setViewportView(tablaVentas);

        btnNuevaVenta.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnNuevaVenta.setText("Nueva Venta");
        btnNuevaVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaVentaActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnCerrarVenta.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnCerrarVenta.setText("Cerrar Venta");
        btnCerrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarVentaActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnActivar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnActivar.setText("Reabrir");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });

        btnEditarVenta.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnEditarVenta.setText("Editar");
        btnEditarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarVentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSelecCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmboxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calendarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDetalle)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditarVenta)
                        .addGap(18, 18, 18)
                        .addComponent(btnCerrarVenta)
                        .addGap(18, 18, 18)
                        .addComponent(btnActivar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevaVenta, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(43, 43, 43))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jScrollPane1)
                    .addGap(38, 38, 38)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuscar)
                            .addComponent(btnNuevaVenta))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblSelecCliente)
                                .addComponent(cmboxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFecha))
                            .addGap(2, 2, 2)))
                    .addComponent(calendarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 370, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetalle)
                    .addComponent(btnActualizar)
                    .addComponent(btnCerrarVenta)
                    .addComponent(btnSalir)
                    .addComponent(btnActivar)
                    .addComponent(btnEditarVenta))
                .addGap(37, 37, 37))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(109, 109, 109)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(135, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        Cliente cliente = (Cliente) cmboxClientes.getSelectedItem();
        Date fechaDate = calendarFecha.getDate();
        if (cliente.getIdCliente() != 0 && fechaDate != null) {
            LocalDate fechaLD = parsearFecha(fechaDate);
            ArrayList<Venta> ventaClienteFecha = (ArrayList<Venta>) ventaData.listarVentasClienteFecha(cliente.getIdCliente(), fechaLD);
            cargarDatos(ventaClienteFecha);

        } else if (cliente.getIdCliente() != 0 && fechaDate == null) {
            ArrayList<Venta> ventasCliente = (ArrayList<Venta>) ventaData.listarVentasCliente(cliente.getIdCliente());
            cargarDatos(ventasCliente);
        } else if (cliente.getIdCliente() == 0 && fechaDate != null) {
            LocalDate fechaLD = parsearFecha(fechaDate);
            ArrayList<Venta> ventasFecha = (ArrayList<Venta>) ventaData.listarVentasFecha(fechaLD);
            cargarDatos(ventasFecha);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalleActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaVentas.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una venta para ver el Detalle");
        } else {
            int idVenta = Integer.parseInt(tablaVentas.getValueAt(filaSelecionada, 0).toString());
            ListaDetalleVenta lisDetV = new ListaDetalleVenta(idVenta);
            lisDetV.setVisible(true);
            Principal.EscritorioPrinc.add(lisDetV);
            Principal.EscritorioPrinc.moveToFront(lisDetV);
        }
    }//GEN-LAST:event_btnDetalleActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnCerrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarVentaActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaVentas.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una venta para Cerrar");
        } else {
            int idVenta = Integer.parseInt(tablaVentas.getValueAt(filaSelecionada, 0).toString());
            ventaData.CerrarVenta(idVenta);
            cargarDatos(listaVentas);
        }
    }//GEN-LAST:event_btnCerrarVentaActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        cargarDatos(listaVentas);
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaVentas.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una venta para Reabrir");
        } else {
            int idVenta = Integer.parseInt(tablaVentas.getValueAt(filaSelecionada, 0).toString());
            ventaData.reabrirVenta(idVenta);
            cargarDatos(listaVentas);
        }
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnNuevaVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaVentaActionPerformed
        // TODO add your handling code here:
        Cliente cliente = (Cliente) cmboxClientes.getSelectedItem();
        Date fechaDate = calendarFecha.getDate();
        if (cliente.getIdCliente() != 0 && fechaDate != null) {
            LocalDate fechaLD = parsearFecha(fechaDate);
            Venta nuevaVenta = new Venta(fechaLD, cliente, true);
            ventaData.guardarVenta(nuevaVenta);
            cargarDatos(listaVentas);
            cargarClientes();
            calendarFecha.setDate(null);
        } else {
            JOptionPane.showMessageDialog(null, "Elija un cliente y la fecha");
            calendarFecha.setDate(null);
            cargarClientes();
        }
    }//GEN-LAST:event_btnNuevaVentaActionPerformed

    private void btnEditarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarVentaActionPerformed
        // TODO add your handling code here:
        int filaSelecionada = tablaVentas.getSelectedRow();
        if (filaSelecionada < 0) {
            JOptionPane.showMessageDialog(null, "Elija una venta para editar");
        } else {
            int idVenta = Integer.parseInt(tablaVentas.getValueAt(filaSelecionada, 0).toString());
            Cliente cliente = (Cliente) cmboxClientes.getSelectedItem();
            Date fechaDate = calendarFecha.getDate();
            if (cliente.getIdCliente() != 0 && fechaDate != null) {
                LocalDate fechaLD = parsearFecha(fechaDate);
                Venta ventaEditar = new Venta(idVenta, fechaLD, cliente, true);
                ventaData.modificarVenta(ventaEditar);
                cargarDatos(listaVentas);
                cargarClientes();
                calendarFecha.setDate(null);
            } else {
                JOptionPane.showMessageDialog(null, "Elija un cliente y la fecha");
                calendarFecha.setDate(null);
                cargarClientes();
            }
        }
    }//GEN-LAST:event_btnEditarVentaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrarVenta;
    private javax.swing.JButton btnDetalle;
    private javax.swing.JButton btnEditarVenta;
    private javax.swing.JButton btnNuevaVenta;
    private javax.swing.JButton btnSalir;
    private com.toedter.calendar.JDateChooser calendarFecha;
    private javax.swing.JComboBox<Cliente> cmboxClientes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblSelecCliente;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tablaVentas;
    // End of variables declaration//GEN-END:variables

    public void cargarClientes() {
        cmboxClientes.removeAllItems();
        Cliente opcionDefecto = new Cliente(0, 0, "Seleccione un cliente", title, title, title, isIcon);
        cmboxClientes.addItem(opcionDefecto);
        for (Cliente cliente : listaClientes) {
            cmboxClientes.addItem(cliente);
        }
    }

    private void armarCabecera() {
        ArrayList<Object> columns = new ArrayList<Object>();
        columns.add("ID");
        columns.add("Fecha");
        columns.add("Apellido");
        columns.add("Nombre");
        columns.add("DNI");
        columns.add("Monto");
        columns.add("Estado");
        for (Object it : columns) {
            modelo.addColumn(it);
        }
        tablaVentas.setModel(modelo);
    }

    private void cargarDatos(ArrayList listaVentas) {
        listaVentas = (ArrayList) ventaData.listarVentas();
        borrarFilasTabla();
        double monto = 0.0;
        String estado = "";
        for (Object ventaOb : listaVentas) {
            Venta venta = (Venta) ventaOb;
            monto = detVentaData.montoTotal(venta.getIdVenta());
            if (venta.isEstado()) {
                estado = "Abierto";
            } else {
                estado = "Cerrado";
            }
            modelo.addRow(new Object[]{venta.getIdVenta(), venta.getFecha(), venta.getCliente().getApellido(), venta.getCliente().getNombre(), venta.getCliente().getDni(), monto, estado});
        }
    }

    public void borrarFilasTabla() {
        int a = modelo.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    public LocalDate parsearFecha(Date fechaDate) {
        long fechaLong = fechaDate.getTime();
        java.sql.Date fechaSql = new java.sql.Date(fechaLong);
        LocalDate fechaLD = fechaSql.toLocalDate();
        return fechaLD;
    }

}
